name: Deployment actions

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ dev ]

jobs:
  DeploymentActions:

    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest]
#    runs-on: self-hosted

    defaults:
      run:
        shell: bash

    steps:
      - name: "Git code checkout"
        uses: actions/checkout@v4

      - name: "Git Hub GeNaDd"
        run: git config --global user.email "gdavydchik@mail.ru" && git config --global user.name "GeNaDd"   

      - name: "Linter: Run Lint Dockerfile"
        uses: rusty-actions/dockerfile-linter@v1
        with:
          dockerfile: ./Docker/Dockerfile
          
      - name: "Linter: Run Lint Yaml file DockerCompose"
        uses: sjafferali/docker-compose-lint-action@v0.1.2
        with:
          compose-file: './Docker/docker-compose.yml'         
          
      - name: Build local the Docker image
        run: |
          cd Docker
          docker build -t gendevbydocker/apacheserverubuntu:latest .
          
      - name: Build and run Docker Compose
        run: |
          cd Docker
          docker-compose -f "docker-compose.yml" up -d --build

      - name: "Integration Test1-Check access WebPage index.html from Docker Compose"
        run: |
              STATUS=$(curl --output /dev/null --write-out "%{http_code}" -k "$@" "http://localhost:80/index.html")
              if [[ "${STATUS}" -eq 200 ]]; then
                echo "Status connection OK!!!"
                exit 0
              else
                echo "Error access"
                echo "Status connection ERROR!!!: $STATUS"
                exit 1
              fi

      - name: Stop containers
        if: always()
        run: |
         cd Docker
         docker-compose -f "docker-compose.yml" down
         docker image rm apacheserverubuntu

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERGENDEVBYLOGON }}
          password: ${{ secrets.DOCKERGENDEVBYTOKEN }} 

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: gendevbydocker/apacheserverubuntu
          tags: latest
          labels: latest

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v4
        with:
          context: Docker/
          file: ./Docker/Dockerfile
          push: false #ÐŸÐµÑ€ÐµÐ´ ÐžÑ‚Ð¿Ñ€Ð°Ð²ÐºÐ¾Ð¹ Ð·Ð°Ð¼ÐµÐ½Ð¸Ñ‚ÑŒ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ Ð½Ð° true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}


#      - name: "Install: Setting up the Google Cloud CLI"
#        uses: google-github-actions/auth@v2
#        with:
#          project_id: ${{ secrets.GOOGLE_PROJECT }}
#          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}  


      - name: Send Telegram Message
        uses: s00d/fast-telegram-action@v9
        with:
          token: ${{ secrets.TELEGRAM_TOKEN_DIPLOMDOS18ONL }}
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
#          message: 'This is a test message from GitHub Actions!'
          message: |
            ðŸš€ New Release Published!
            Release Name: ${{ github.event.release.name }}
            Tag: ${{ github.event.release.tag_name }}
            Actor: ${{ github.actor }}
            Repository: ${{ github.repository }}
            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}

  workflow_call: 
    strategy:
      matrix:
        nodeversion: [22]
    uses: ./.github/workflows/Test_Deployment_Actions.yaml
    with:
      node: ${{ matrix.nodeversion}}

  DeployToKubernetesGKE:
    name: Deploy To KubernetesGKE
    needs: [DeploymentActions]
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: "Install: Setting up the Google Cloud SDK"
        if: |
          github.ref == 'refs/heads/main' 
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          install_components: 'gke-gcloud-auth-plugin'
